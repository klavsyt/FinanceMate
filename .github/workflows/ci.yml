name: CI with Docker, Alembic, and Pytest

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_COMPOSE_VERSION: "v2.24.5"
  PYTHON_VERSION: "3.12"

  # Production environment
  DATABASE_URL: "postgresql+asyncpg://postgres:postgres@db:5432/finance_db"
  SYNC_DATABASE_URL: "postgresql+psycopg2://postgres:postgres@db:5432/finance_db"
  SECRET_KEY: "your-production-secret-key"
  ALGORITHM: "HS256"
  ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  REFRESH_TOKEN_EXPIRE_DAYS: "5"
  REDIS_URL: "redis://redis:6379/0"
  CORS_ORIGINS: "http://localhost:5500,http://127.0.0.1:5500,http://localhost:5173"

  # Test environment
  TEST_DATABASE_URL: "postgresql+asyncpg://postgres:postgres@test_db:5432/finance_db_test"
  TEST_SYNC_DATABASE_URL: "postgresql+psycopg2://postgres:postgres@test_db:5432/finance_db_test"
  TEST_SECRET_KEY: "testsecret"
  TEST_ALGORITHM: "HS256"
  TEST_ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  TEST_REFRESH_TOKEN_EXPIRE_DAYS: "5"
  TEST_REDIS_URL: "redis://redis:6379/1"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_db
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      test_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_db_test
        ports:
          - "5433:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - "6379:6379"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install poetry

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs/
            ~/.cache/pypoetry/artifacts/
          key: poetry-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Set up Docker Compose
        run: |
          curl -fsSL https://github.com/docker/compose/releases/download/${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Create env file
        run: |
          cat <<EOF > .env
          DATABASE_URL=$DATABASE_URL
          SYNC_DATABASE_URL=$SYNC_DATABASE_URL
          SECRET_KEY=$SECRET_KEY
          ALGORITHM=$ALGORITHM
          ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES
          REFRESH_TOKEN_EXPIRE_DAYS=$REFRESH_TOKEN_EXPIRE_DAYS
          REDIS_URL=$REDIS_URL
          CORS_ORIGINS=$CORS_ORIGINS
          TEST_DATABASE_URL=$TEST_DATABASE_URL
          TEST_SYNC_DATABASE_URL=$TEST_SYNC_DATABASE_URL
          TEST_SECRET_KEY=$TEST_SECRET_KEY
          TEST_ALGORITHM=$TEST_ALGORITHM
          TEST_ACCESS_TOKEN_EXPIRE_MINUTES=$TEST_ACCESS_TOKEN_EXPIRE_MINUTES
          TEST_REFRESH_TOKEN_EXPIRE_DAYS=$TEST_REFRESH_TOKEN_EXPIRE_DAYS
          TEST_REDIS_URL=$TEST_REDIS_URL
          EOF

      - name: Build and start containers
        run: docker-compose up -d --build

      - name: Apply migrations to main DB
        run: docker-compose exec app alembic upgrade head

      - name: Apply migrations to test DB
        run: docker-compose exec app bash -c 'DATABASE_URL=$TEST_DATABASE_URL alembic upgrade head'

      - name: Run tests
        run: poetry run pytest

      - name: Show logs if failed
        if: failure()
        run: docker-compose logs